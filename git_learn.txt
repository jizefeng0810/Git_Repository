1、初始化一个Git仓库，使用git init命令。
2、添加文件到Git仓库，分两步：
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。
3、HEAD指向的版本就是当前版本(HEAD^指上一个版本)，因此，Git允许我们在版本的历史之间穿梭，使用命令
	git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	git log --pretty=oneline
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
4、工作区和暂存区
仓库的文件夹就是一个工作区
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	git status：查看仓库状态
暂存区为git add提交的文件暂存的内存空间，再通过git commit提交到仓库。
5、管理修改
第一次修改 -> git add -> 第二次修改 -> git commit
提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
6、撤销修改
命令git restore -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
如git add到暂存区，使用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区，再通过git restore -- readme.txt撤销

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
7、删除文件
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
8、添加远程库和克隆
①Github上添加SSH Key,再shell创建SSH Key，使用命令：ssh-keygen -t rsa -C "youremail@example.com"
复制id_rsa.pub文件内容，"Add SSH Key"到Github

②要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

③要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
9、创建与合并分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
10、BUG分支
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
11、feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
12、多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
13、标签
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

git仓库中已经有一部分代码,所以它不允许你直接把你的代码覆盖上去。你有2个选择方式：
1，强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容
	$ git push -f
2，先把git的东西fetch到你本地然后merge后再push
	$ git fetch
	$ git merge
使用git pull --rebase origin master，一粒起效

